//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Header file for the SE3 Lie Group types.
/// \details These types provide a standardized definition for various SE3 quantities.
///
/// \author Kirk MacTavish
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef LGM_SE3_TYPES_HPP
#define LGM_SE3_TYPES_HPP

#include <Eigen/Core>

/////////////////////////////////////////////////////////////////////////////////////////////
/// Lie Group Math - Special Orthogonal Group
/////////////////////////////////////////////////////////////////////////////////////////////
namespace lgmath {
namespace se3 {

/////////////////////////////////////////////////////////////////////////////////////////////
/// A translation vector, r_ba_ina, which translates points from the origin to b in frame a
/////////////////////////////////////////////////////////////////////////////////////////////
typedef Eigen::Vector3d TranslationVector;

/////////////////////////////////////////////////////////////////////////////////////////////
/// A Lie algebra vector composed of a stacked translation and axis-angle rotation.
///
///   xi_ba = [  rho_ba]
///           [aaxis_ba]
///
/////////////////////////////////////////////////////////////////////////////////////////////
typedef Eigen::Matrix<double,6,1> LieAlgebra;

/////////////////////////////////////////////////////////////////////////////////////////////
/// The covariance matrix of a Lie algebra vector
/////////////////////////////////////////////////////////////////////////////////////////////
typedef Eigen::Matrix<double,6,6> LieAlgebraCovariance;

/////////////////////////////////////////////////////////////////////////////////////////////
/// A transformation, T_ba, transforms points from frame a to frame b.
///
///   T_ba = [ C_ba, -C_ba*r_ba_ina]
///          [0 0 0,              1]
/////////////////////////////////////////////////////////////////////////////////////////////
typedef Eigen::Matrix4d TransformationMatrix;

} // se3
} // lgmath

#endif // LGM_SE3_TYPES_HPP
